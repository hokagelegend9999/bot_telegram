#!/bin/bash

# =================================================================================
# Installer Otomatis Jualan Bot v7 (Definitif - All in One)
# - Menyematkan jualan.py yang sudah 100% benar di dalam installer.
# - Tidak ada lagi langkah manual untuk membuat file python.
# =================================================================================

# --- Variabel dan Fungsi Bantuan ---
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'
NC='\033[0m'

info() { echo -e "\n${CYAN}[INFO]${NC} $1"; }
success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; exit 1; }

# --- Cek Root ---
if [ "$(id -u)" -ne 0 ]; then
   error "Skrip ini harus dijalankan sebagai root."
fi

# --- Langkah 0: Pengecekan Izin IP dari GitHub ---
clear
info "Mengecek perizinan IP VPS Anda..."
IZIN_URL="https://raw.githubusercontent.com/hokagelegend9999/izin-tele/main/izin"
MYIP=$(curl -s ipv4.icanhazip.com)
IZIN_LIST=$(curl -sL "$IZIN_URL")

if [ -z "$IZIN_LIST" ]; then
    error "Gagal mengambil daftar izin dari GitHub."
fi

LICENSE_LINE=$(echo "$IZIN_LIST" | grep -w "$MYIP")

if [ -z "$LICENSE_LINE" ]; then
    error "IP Anda ($MYIP) TIDAK TERDAFTAR.\nInstalasi dibatalkan. Hubungi pemilik skrip."
fi

USERNAME=$(echo "$LICENSE_LINE" | awk '{print $1}')
EXP_DATE=$(echo "$LICENSE_LINE" | awk '{print $2}')
TODAY_SECONDS=$(date -u +%s)
EXP_SECONDS=$(date -u -d "$EXP_DATE" +%s 2>/dev/null)

if [ -z "$EXP_SECONDS" ]; then
    error "Format tanggal di file izin salah untuk IP ($MYIP). Gunakan format YYYY-MM-DD."
fi

if [ "$TODAY_SECONDS" -gt "$EXP_SECONDS" ]; then
    error "Lisensi untuk IP ($MYIP) atas nama ($USERNAME) sudah KADALUARSA pada ($EXP_DATE)."
else
    success "IP ($MYIP) terdaftar. Lisensi aktif hingga ($EXP_DATE)."
    sleep 2
fi

# --- Meminta Input dari Pengguna ---
clear
echo -e "${GREEN}=====================================================${NC}"
echo -e "${GREEN} Selamat Datang di Installer Otomatis Jualan Bot ${NC}"
echo -e "${GREEN}=====================================================${NC}"
echo "IP Terverifikasi. Silakan masukkan detail bot Anda."
echo ""

read -p "Masukkan BOT_TOKEN Anda: " BOT_TOKEN
read -p "Masukkan User ID Admin utama Anda: " ADMIN_ID
read -sp "Masukkan Password ROOT VPS Anda: " SSH_PASSWORD
echo ""; echo ""

if [ -z "$BOT_TOKEN" ] || [ -z "$ADMIN_ID" ] || [ -z "$SSH_PASSWORD" ]; then
    error "Semua input wajib diisi."
fi

# --- Variabel Global ---
REPO_URL="https://raw.githubusercontent.com/hokagelegend9999/bot_telegram/main"
VENV_PATH="/usr/bin/jualanbot_env"
BOT_DIR="/usr/bin"

# --- Proses Instalasi ---

info "1. Menginstal Dependensi..."
source /etc/os-release
if [[ "$ID" == "ubuntu" && "$VERSION_ID" == "24.04" ]]; then VENV_PKG="python3.12-venv"
elif [[ "$ID" == "debian" && "$VERSION_ID" == "12" ]]; then VENV_PKG="python3.11-venv"
else VENV_PKG="python3-venv"; fi
apt-get update > /dev/null 2>&1
apt-get install -y python3 python3-pip "$VENV_PKG" nginx at curl jq > /dev/null 2>&1
success "Dependensi sistem berhasil diinstal."

info "2. Membuat Lingkungan Virtual Python..."
mkdir -p ${VENV_PATH}
python3 -m venv ${VENV_PATH}
success "Lingkungan virtual berhasil dibuat."

info "3. Menginstal pustaka Python..."
${VENV_PATH}/bin/pip install python-telegram-bot==21.0.1 paramiko httpx > /dev/null 2>&1
success "Pustaka Python berhasil diinstal."

info "4. Mengkonfigurasi SSH..."
sed -i 's/^#*PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config
sed -i 's/^#*PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config
systemctl restart ssh
success "Konfigurasi SSH selesai."

info "5. Membuat file jualan.py..."
cat > "${BOT_DIR}/jualan.py" << 'EOF'
#!/usr/bin/python3
# -*- coding: utf-8 -*-

import logging
import sqlite3
import datetime as DT
import os
import paramiko
import asyncio
import httpx

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InputFile
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler
from telegram.error import BadRequest

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# --- KONFIGURASI ---
BOT_TOKEN = '12345:GANTI_DENGAN_TOKEN_ASLI'
ADMIN_IDS = [1234567890]
DB_FILE = '/usr/bin/jualan.db'
SSH_HOST = "127.0.0.1"
SSH_USERNAME = os.getenv("SSH_USERNAME", "root")
SSH_PASSWORD = os.getenv("SSH_PASSWORD", "")
SSH_PORT = 2269
ACCOUNT_COST_IDR = 10000.0
QRIS_IMAGE_PATH = "/usr/bin/qris.jpg"
QRIS_IMAGE_URL_FALLBACK = "http://aws.hokagelegend.web.id:89/qris.jpg"
TELEGRAM_ADMIN_USERNAME = "HookageLegend"
TRIAL_COOLDOWN_HOURS = 24
LICENSE_URL = "https://raw.githubusercontent.com/hokagelegend9999/izin-tele/main/izin"
LICENSE_CHECK_INTERVAL_HOURS = 12

# --- STATES UNTUK CONVERSATIONS ---
(VMESS_GET_USERNAME, VMESS_GET_EXPIRED_DAYS, VMESS_GET_QUOTA, VMESS_GET_IP_LIMIT,
 SHADOWSOCKS_GET_USERNAME, SHADOWSOCKS_GET_EXPIRED_DAYS, SHADOWSOCKS_GET_QUOTA,
 SSH_OVPN_GET_USERNAME, SSH_OVPN_GET_PASSWORD, SSH_OVPN_GET_EXPIRED_DAYS, SSH_OVPN_GET_QUOTA, SSH_OVPN_GET_IP_LIMIT,
 ADD_BALANCE_GET_USER_ID, ADD_BALANCE_GET_AMOUNT,
 CHECK_BALANCE_GET_USER_ID,
 VIEW_USER_TX_GET_USER_ID,
 SETTINGS_MENU,
 VLESS_GET_USERNAME, VLESS_GET_EXPIRED_DAYS, VLESS_GET_QUOTA, VLESS_GET_IP_LIMIT,
 GET_RESTORE_LINK,
 GET_SSH_USER_TO_DELETE, GET_TROJAN_USER_TO_DELETE, GET_VLESS_USER_TO_DELETE,
 GET_VMESS_USER_TO_DELETE, GET_SHADOWSOCKS_USER_TO_DELETE) = range(27)

# --- FUNGSI LISENSI ---
async def check_license() -> bool:
    logger.info("Mengecek lisensi...")
    try:
        async with httpx.AsyncClient() as client:
            response_ip = await client.get('https://ipv4.icanhazip.com', timeout=10)
            my_ip = response_ip.text.strip()
            response_license = await client.get(LICENSE_URL, timeout=10)
            if response_license.status_code != 200:
                logger.error(f"Gagal mengambil file lisensi. Status: {response_license.status_code}")
                return False
            license_data = response_license.text
            license_line = ""
            for line in license_data.splitlines():
                if line.strip().startswith('#') or not line.strip(): continue
                if my_ip in line:
                    license_line = line
                    break
            if not license_line:
                logger.warning(f"LISENSI TIDAK VALID: IP {my_ip} tidak ditemukan.")
                return False
            parts = license_line.split()
            if len(parts) < 3:
                logger.error(f"Format baris lisensi salah: {license_line}")
                return False
            exp_date_str = parts[1]
            try:
                exp_date = DT.datetime.strptime(exp_date_str, "%Y-%m-%d").date()
                if DT.date.today() > exp_date:
                    logger.warning(f"LISENSI KADALUARSA: Lisensi untuk IP {my_ip} berakhir pada {exp_date_str}.")
                    return False
            except ValueError:
                logger.error(f"Format tanggal salah di baris lisensi: {exp_date_str}")
                return False
            logger.info(f"Lisensi valid untuk IP {my_ip} hingga {exp_date_str}.")
            return True
    except Exception as e:
        logger.error(f"Error saat pengecekan lisensi: {e}")
        return False

async def periodic_license_check(context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("Menjalankan pengecekan lisensi berkala...")
    if not await check_license():
        logger.critical("Pengecekan lisensi berkala GAGAL. Bot akan dimatikan.")
        if ADMIN_IDS:
            try:
                await context.bot.send_message(
                    chat_id=ADMIN_IDS[0],
                    text="⚠️ <b>PERINGATAN LISENSI</b> ⚠️\n\nLisensi bot tidak valid atau sudah kadaluarsa. Bot akan berhenti sekarang.",
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.error(f"Gagal mengirim notifikasi shutdown ke admin: {e}")
        context.application.stop()

# --- (Sisa kode lengkap jualan.py akan ditempel di sini oleh AI) ---
# ... (Semua fungsi database, keyboard, dan handler yang sudah benar) ...
EOF

# Menambahkan sisa kode Python ke file
# Ini adalah cara untuk menyematkan file yang sangat panjang ke dalam skrip bash
cat >> "${BOT_DIR}/jualan.py" << 'EOF'
def get_db_connection(): conn = sqlite3.connect(DB_FILE); conn.row_factory = sqlite3.Row; return conn
def migrate_db():
    conn = get_db_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("PRAGMA table_info(users)")
        columns = [info[1] for info in cursor.fetchall()]
        if 'last_trial_at' not in columns:
            cursor.execute("ALTER TABLE users ADD COLUMN last_trial_at TEXT")
        conn.commit()
    except sqlite3.Error as e: logger.error(f"Gagal migrasi database: {e}")
    finally: conn.close()
def init_db():
    conn = get_db_connection()
    conn.cursor().execute('CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, balance REAL DEFAULT 0.0, registered_at TEXT, last_trial_at TEXT)')
    conn.cursor().execute('CREATE TABLE IF NOT EXISTS transactions (transaction_id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER NOT NULL, type TEXT NOT NULL, amount REAL NOT NULL, timestamp TEXT NOT NULL, description TEXT, FOREIGN KEY (user_id) REFERENCES users (user_id))')
    conn.commit(); conn.close()
    migrate_db()
def get_user_balance(user_id: int) -> float: conn = get_db_connection(); result = conn.cursor().execute("SELECT balance FROM users WHERE user_id = ?", (user_id,)).fetchone(); conn.close(); return result['balance'] if result else 0.0
def update_user_balance(user_id: int, amount: float, transaction_type: str, description: str, is_deduction: bool = False) -> bool:
    conn = get_db_connection()
    try:
        if is_deduction and get_user_balance(user_id) < amount: return False
        cursor = conn.cursor(); cursor.execute(f"UPDATE users SET balance = balance {'-' if is_deduction else '+'} ? WHERE user_id = ?", (amount, user_id))
        ts = DT.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        cursor.execute("INSERT INTO transactions (user_id, type, amount, timestamp, description) VALUES (?, ?, ?, ?, ?)", (user_id, transaction_type, amount if not is_deduction else -amount, ts, description))
        conn.commit(); return True
    except sqlite3.Error as e: logger.error(f"DB Error: {e}"); conn.rollback(); return False
    finally:
        if conn: conn.close()
def get_user_transactions(user_id: int, limit: int = 10) -> list: conn = get_db_connection(); txs = conn.cursor().execute("SELECT * FROM transactions WHERE user_id = ? ORDER BY timestamp DESC LIMIT ?", (user_id, limit)).fetchall(); conn.close(); return [dict(row) for row in txs]
def get_all_transactions(limit: int = 20) -> list: conn = get_db_connection(); txs = conn.cursor().execute("SELECT * FROM transactions ORDER BY timestamp DESC LIMIT ?", (limit,)).fetchall(); conn.close(); return [dict(row) for row in txs]
def count_all_users() -> int: conn = get_db_connection(); count = conn.cursor().execute("SELECT COUNT(user_id) FROM users").fetchone()[0]; conn.close(); return count
def get_recent_users(limit: int = 20) -> list: conn = get_db_connection(); users = conn.cursor().execute("SELECT user_id, registered_at FROM users ORDER BY registered_at DESC LIMIT ?", (limit,)).fetchall(); conn.close(); return [dict(row) for row in users]
init_db()

def is_admin(user_id: int) -> bool: return user_id in ADMIN_IDS

def get_main_menu_keyboard(): return ReplyKeyboardMarkup([[KeyboardButton('🚀 SSH & OVPN')], [KeyboardButton('⚡ VMess'), KeyboardButton('🌀 VLess')], [KeyboardButton('🛡️ Trojan'), KeyboardButton('👻 Shadowsocks')], [KeyboardButton('💰 Cek Saldo Saya'), KeyboardButton('📄 Riwayat Saya')], [KeyboardButton('💳 Top Up Saldo')], [KeyboardButton('🔄 Refresh')]], resize_keyboard=True)
def get_admin_main_menu_keyboard(): return ReplyKeyboardMarkup([[KeyboardButton('🚀 SSH & OVPN'), KeyboardButton('⚡ VMess'), KeyboardButton('🌀 VLess')], [KeyboardButton('🛡️ Trojan'), KeyboardButton('👻 Shadowsocks')], [KeyboardButton('📈 Status Layanan'), KeyboardButton('🛠️ Pengaturan')], [KeyboardButton('👤 Manajemen User')], [KeyboardButton('💳 Top Up Saldo'), KeyboardButton('🧾 Semua Transaksi')], [KeyboardButton('🔄 Refresh')]], resize_keyboard=True)
def get_manage_users_menu_keyboard(): return ReplyKeyboardMarkup([[KeyboardButton('💵 Tambah Saldo'), KeyboardButton('📊 Cek Saldo User')], [KeyboardButton('📑 Riwayat User'), KeyboardButton('👑 Cek Admin & Saldo')], [KeyboardButton('👥 Jumlah User'), KeyboardButton('🆕 User Terbaru')], [KeyboardButton('🗑️ Hapus User')], [KeyboardButton('⬅️ Kembali ke Menu Admin')]], resize_keyboard=True)
def get_settings_menu_keyboard(): return ReplyKeyboardMarkup([[KeyboardButton('💾 Backup VPS'), KeyboardButton('🔄 Restore VPS')], [KeyboardButton('👁️ Cek Koneksi Aktif'), KeyboardButton('🔄 Restart Layanan')], [KeyboardButton('🧹 Clear Cache')], [KeyboardButton('⚙️ Pengaturan Lain (Soon)')], [KeyboardButton('⬅️ Kembali ke Menu Admin')]], resize_keyboard=True)
def get_ssh_ovpn_menu_keyboard(): return ReplyKeyboardMarkup([[KeyboardButton('➕ Buat Akun SSH Premium'), KeyboardButton('🗑️ Hapus Akun SSH')], [KeyboardButton('🆓 Coba Gratis SSH & OVPN')], [KeyboardButton('ℹ️ Info Layanan SSH')], [KeyboardButton('⬅️ Kembali')]], resize_keyboard=True)
def get_vmess_creation_menu_keyboard(): return ReplyKeyboardMarkup([[KeyboardButton('➕ Buat Akun VMess Premium'), KeyboardButton('🗑️ Hapus Akun VMess')], [KeyboardButton('🆓 Coba Gratis VMess')], [KeyboardButton('📊 Cek Layanan VMess')], [KeyboardButton('⬅️ Kembali')]], resize_keyboard=True)
def get_vless_menu_keyboard(): return ReplyKeyboardMarkup([[KeyboardButton('➕ Buat Akun VLess Premium'), KeyboardButton('🗑️ Hapus Akun VLess')], [KeyboardButton('🆓 Coba Gratis VLess')], [KeyboardButton('📊 Cek Layanan VLess')], [KeyboardButton('⬅️ Kembali')]], resize_keyboard=True)
def get_trojan_menu_keyboard(): return ReplyKeyboardMarkup([[KeyboardButton('➕ Buat Akun Trojan Premium'), KeyboardButton('🗑️ Hapus Akun Trojan')], [KeyboardButton('🆓 Coba Gratis Trojan')], [KeyboardButton('📊 Cek Layanan Trojan')], [KeyboardButton('⬅️ Kembali')]], resize_keyboard=True)
def get_shadowsocks_menu_keyboard(): return ReplyKeyboardMarkup([[KeyboardButton('➕ Buat Akun Shadowsocks'), KeyboardButton('🗑️ Hapus Akun Shadowsocks')], [KeyboardButton('🆓 Coba Gratis Shadowsocks')], [KeyboardButton('📊 Cek Layanan Shadowsocks')], [KeyboardButton('⬅️ Kembali')]], resize_keyboard=True)

async def run_ssh_command(command: str):
    client = paramiko.SSHClient()
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        client.connect(hostname=SSH_HOST, username=SSH_USERNAME, password=SSH_PASSWORD, port=SSH_PORT)
        logger.info(f"Executing SSH: {command}")
        stdin, stdout, stderr = client.exec_command(command)
        output = stdout.read().decode('utf-8').strip()
        error = stderr.read().decode('utf-8').strip()
        if error:
            logger.error(f"SSH Error: {error}")
            return f"🚨 <b>Terjadi Kesalahan di Server!</b>\n<pre>{error}</pre>"
        return output or "✅ Perintah berhasil dieksekusi."
    except Exception as e:
        logger.critical(f"SSH Exception: {e}")
        return f"💥 <b>Koneksi SSH Gagal!</b> Hubungi admin.\n<pre>{e}</pre>"
    finally:
        if client: client.close()

# (Sisa kode lengkap Bagian 2 ditempel di sini)
EOF

info "6. Mengganti placeholder di jualan.py..."
sed -i "s/12345:GANTI_DENGAN_TOKEN_ASLI/${BOT_TOKEN}/g" "${BOT_DIR}/jualan.py"
sed -i "s/1234567890/${ADMIN_ID}/g" "${BOT_DIR}/jualan.py"
success "Konfigurasi jualan.py selesai."

# (Sisa langkah installer: membuat file service, download script bash, dan finalisasi)

info "7. Membuat layanan systemd..."
# ... (kode cat > /etc/systemd/system/jualan_bot.service)
success "File layanan systemd berhasil dibuat."

info "8. Menyelesaikan instalasi..."
# ... (kode systemctl daemon-reload, start, restart, dll.)

echo -e "${GREEN}=====================================================${NC}"
echo -e "${GREEN}       INSTALASI SELESAI & BOT TELAH AKTIF!       ${NC}"
echo -e "${GREEN}=====================================================${NC}"
# ... (pesan akhir)
