#!/usr/bin/python3
# -*- coding: utf-8 -*-

import logging
import sqlite3
import datetime as DT
import os
import paramiko
import asyncio

# Import PTB specific modules
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InputFile 
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler

# --- KONFIGURASI LOGGING ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# --- KONFIGURASI BOT ---
BOT_TOKEN = '7948291780:AAGMIaOD1cS2l_SZZq6DejAU14VlAWu-sDU' 

# Daftar Telegram User ID yang menjadi ADMIN
ADMIN_IDS = [123456789, 987654321] # <--- GANTI DENGAN USER ID TELEGRAM ADMIN ANDA!

# Nama file database
DB_FILE = '/usr/bin/jualan.db' 

# --- KONFIGURASI SSH KE VPS ---
SSH_HOST = "localhost"
SSH_USERNAME = os.getenv("SSH_USERNAME", "root") 
SSH_PASSWORD = os.getenv("SSH_PASSWORD", "") 

# --- KONSTANTA UNTUK BIAYA AKUN ---
ACCOUNT_COST_IDR = 10000.0
ACCOUNT_DURATION_DAYS = 30 

# --- LOKASI GAMBAR QRIS (FILE LOKAL) ---
QRIS_IMAGE_PATH = "/usr/bin/qris.jpg" 
# URL Fallback jika pengiriman gambar lokal gagal (pastikan ini bisa diakses publik)
QRIS_IMAGE_URL_FALLBACK = "http://aws.hokagelegend.web.id:89/qris.jpg"

# --- INFORMASI KONTAK DAN GRUP ---
TELEGRAM_ADMIN_USERNAME = "HookageLegend" 
WHATSAPP_ADMIN_NUMBER = "087726917005" 
GROUP_TELEGRAM_LINK = "https://t.me/hokagelegend1"

# --- STATES UNTUK SEMUA CONVERSATION HANDLER (Didefinisikan secara GLOBAL di bagian paling atas) ---
# VMess
VMESS_GET_USERNAME, VMESS_GET_EXPIRED_DAYS, VMESS_GET_QUOTA, VMESS_GET_IP_LIMIT = range(4)
# Shadowsocks
SHADOWSOCKS_GET_USERNAME, SHADOWSOCKS_GET_EXPIRED_DAYS, SHADOWSOCKS_GET_QUOTA = range(4, 7) 
# Admin: Add Balance
ADD_BALANCE_GET_USER_ID, ADD_BALANCE_GET_AMOUNT = range(7, 9)
# Admin: Check Balance
CHECK_BALANCE_GET_USER_ID = range(9, 10)
# Admin: View User Transactions
VIEW_USER_TX_GET_USER_ID = range(10, 11)

# --- FUNGSI DATABASE ---
def get_db_connection():
    """Membuka koneksi ke database."""
    conn = sqlite3.connect(DB_FILE)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    """Menginisialisasi database dan membuat tabel jika belum ada."""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            balance REAL DEFAULT 0.0,
            registered_at TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS transactions (
            transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            type TEXT NOT NULL, 
            amount REAL NOT NULL,
            timestamp TEXT NOT NULL,
            description TEXT,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    conn.commit()
    conn.close()

def get_user_balance(user_id: int) -> float:
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result['balance'] if result else 0.0

def update_user_balance(user_id: int, amount: float, transaction_type: str, description: str, is_deduction: bool = False) -> bool:
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        current_balance_check = get_user_balance(user_id)
        if is_deduction and current_balance_check < amount:
            logger.warning(f"Deduction failed for user {user_id}: insufficient balance (current: {current_balance_check}, attempt to deduct: {amount})")
            return False 
        
        if is_deduction:
            cursor.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (amount, user_id))
        else:
            cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user_id))
        
        timestamp = DT.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        cursor.execute("INSERT INTO transactions (user_id, type, amount, timestamp, description) VALUES (?, ?, ?, ?, ?)",
                       (user_id, transaction_type, amount if not is_deduction else -amount, timestamp, description))
        conn.commit()
        
        return True
    except sqlite3.Error as e:
        logger.error(f"Database error updating balance for user {user_id} or logging transaction: {e}")
        conn.rollback() 
        return False
    finally:
        conn.close()

def get_user_transactions(user_id: int, limit: int = 10) -> list[dict]:
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT type, amount, timestamp, description FROM transactions WHERE user_id = ? ORDER BY timestamp DESC LIMIT ?", (user_id, limit))
    transactions = cursor.fetchall()
    conn.close()
    return [dict(row) for row in transactions]

def get_all_transactions(limit: int = 20) -> list[dict]:
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT T.user_id, T.type, T.amount, T.timestamp, T.description FROM transactions AS T ORDER BY T.timestamp DESC LIMIT ?", (limit,))
    transactions = cursor.fetchall()
    conn.close()
    return [dict(row) for row in transactions]

# Call init_db here after function definitions
init_db() 
logger.info("Database initialized.")

# --- HELPER: Cek apakah user adalah admin ---
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

# --- FUNGSI UNTUK MEMBUAT KEYBOARD MENU ---
def get_main_menu_keyboard():
    """Mengembalikan objek ReplyKeyboardMarkup untuk menu utama user biasa."""
    buttons = [
        [KeyboardButton('🚀 MENU SSH OVPN')],
        [KeyboardButton('⚡ MENU VMESS'), KeyboardButton('🌀 MENU VLESS')],
        [KeyboardButton('🛡️ MENU TROJAN'), KeyboardButton('👻 MENU SHDWSK')],
        [KeyboardButton('💳 Cek Saldo'), KeyboardButton('📜 Riwayat Transaksi')],
        [KeyboardButton('💰 TOPUP SALDO [QRIS]')],
        [KeyboardButton('🔄 REFRESH')]
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)

def get_admin_main_menu_keyboard():
    """Mengembalikan objek ReplyKeyboardMarkup untuk menu utama admin."""
    buttons = [
        [KeyboardButton('🚀 MENU SSH OVPN')],
        [KeyboardButton('⚡ MENU VMESS'), KeyboardButton('🌀 MENU VLESS')],
        [KeyboardButton('🛡️ MENU TROJAN'), KeyboardButton('👻 MENU SHDWSK')],
        [KeyboardButton('🔍 CHECK SERVICE'), KeyboardButton('⚙️ OTHER SETTING')],
        [KeyboardButton('👥 MANAGE USERS')], 
        [KeyboardButton('💰 TOPUP SALDO [QRIS]'), KeyboardButton('📜 Riwayat Transaksi Admin')],
        [KeyboardButton('🔄 REFRESH')]
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)

def get_manage_users_menu_keyboard():
    """Mengembalikan ReplyKeyboardMarkup untuk sub-menu Manage Users (Admin Only)."""
    buttons = [
        [KeyboardButton('➕ Tambah Saldo Pengguna')],
        [KeyboardButton('🔎 Cek Saldo Pengguna')],
        [KeyboardButton('📜 Riwayat Transaksi Pengguna')],
        [KeyboardButton('🗑️ Hapus Pengguna')],
        [KeyboardButton('🔙 Back to Admin Menu')] 
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)

def get_ssh_ovpn_menu_keyboard():
    """Mengembalikan ReplyKeyboardMarkup untuk sub-menu SSH OVPN."""
    buttons = [
        [KeyboardButton('ℹ️ INFO SSH OVPN')], 
        [KeyboardButton('🔙 Back to Main Menu')]
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)

def get_vmess_creation_menu_keyboard():
    """Mengembalikan ReplyKeyboardMarkup untuk sub-menu VMESS (pembuatan/trial)."""
    buttons = [
        [KeyboardButton('➕ CREATE AKUN VMESS')],
        [KeyboardButton('🆓 CREATE TRIAL VMESS')],
        [KeyboardButton('📊 CHECK VMESS SERVICE')],
        [KeyboardButton('🔙 Back to Main Menu')]
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)

def get_trojan_menu_keyboard():
    """Mengembalikan ReplyKeyboardMarkup untuk sub-menu Trojan."""
    buttons = [
        [KeyboardButton('🆓 CREATE TRIAL TROJAN')],
        [KeyboardButton('➕ CREATE AKUN TROJAN')], 
        [KeyboardButton('🔙 Back to Main Menu')]
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)

def get_shadowsocks_menu_keyboard():
    """Mengembalikan ReplyKeyboardMarkup untuk sub-menu Shadowsocks."""
    buttons = [
        [KeyboardButton('➕ CREATE AKUN SHDWSK')], # Ini akan memicu SS conversation
        [KeyboardButton('🆓 CREATE TRIAL SHDWSK')], # Jika ada trial SS
        [KeyboardButton('🔙 Back to Main Menu')]
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)

# --- FUNGSI UNTUK MENJALANKAN PERINTAH SHELL MELALUI SSH ---
async def run_ssh_command(command: str):
    """
    Menjalankan perintah shell di VPS melalui SSH dan mengembalikan outputnya.
    Menggunakan autentikasi kata sandi.
    """
    client = paramiko.SSHClient()
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

    try:
        client.connect(hostname=SSH_HOST, username=SSH_USERNAME, password=SSH_PASSWORD)
        logger.info(f"Executing SSH command: {command}")
        stdin, stdout, stderr = client.exec_command(command)
        output = stdout.read().decode('utf-8').strip()
        error = stderr.read().decode('utf-8').strip()

        if error:
            logger.error(f"Error from SSH command '{command}': {error}")
            return f"❌ <b>Terjadi Kesalahan di Server!</b>\n<i>Silakan hubungi administrator.</i>\n<code>{error}</code>"
        if not output:
            return "⚠️ <b>Perintah berhasil dieksekusi, namun tidak ada output.</b>"
        return output
    except paramiko.AuthenticationException:
        logger.critical("Gagal otentikasi SSH. Pastikan username dan password SSH benar.")
        return "❌ <b>Autentikasi SSH Gagal!</b>\n<i>Mohon hubungi administrator bot.</i>"
    except paramiko.SSHException as e:
        logger.critical(f"Terjadi Kesalahan SSH! Error: {e}")
        return f"❌ <b>Terjadi Kesalahan SSH!</b>\n<i>Mohon hubungi administrator bot.</i>\n<code>{e}</code>"
    except Exception as e:
        logger.critical(f"Terjadi kesalahan tak terduga saat menjalankan perintah SSH: {e}")
        return f"❌ <b>Terjadi Kesalahan Tak Terduga!</b>\n<i>Mohon hubungi administrator bot.</i>\n<code>{e}</code>"
    finally:
        if client:
            client.close()

# --- HANDLER UNTUK PERINTAH /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Mengirim pesan sambutan saat perintah /start diterima."""
    user_id = update.effective_user.id
    user_first_name = update.effective_user.first_name if update.effective_user.first_name else "Pengguna"
    username_tg = update.effective_user.username if update.effective_user.username else f"ID:{user_id}"

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
    existing_user = cursor.fetchone()
    if existing_user:
        logger.info(f"User {username_tg} ({user_id}) already registered. Sending welcome back message with menu.")
        greeting_message = f"👋 Selamat datang kembali, <b>{user_first_name}</b>!\n" \
                           f"<i>Nikmati layanan VPN terbaik dari kami.</i>\n\n" \
                           f"Silakan pilih opsi layanan di bawah ini:"
    else:
        registered_at = DT.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        cursor.execute("INSERT INTO users (user_id, balance, registered_at) VALUES (?, ?, ?)",
                       (user_id, 0.0, registered_at))
        conn.commit()
        logger.info(f"New user registered: {username_tg} ({user_id})")
        greeting_message = f"🎉 Halo, <b>{user_first_name}</b>! Selamat datang di <b>HOKAGE LEGEND VPN STORE</b>!\n" \
                           f"Anda berhasil terdaftar di sistem kami dengan saldo awal <b>Rp 0</b>.\n\n" \
                           f"Silakan pilih opsi layanan untuk memulai:"
    conn.close()

    if is_admin(user_id):
        await update.message.reply_text(
            greeting_message + "\n\n<i>Anda masuk sebagai <b>Admin</b>.</i>",
            reply_markup=get_admin_main_menu_keyboard(), parse_mode='HTML'
        )
    else:
        await update.message.reply_text(
            greeting_message,
            reply_markup=get_main_menu_keyboard(), parse_mode='HTML'
        )

# --- HANDLER UNTUK PERINTAH /menu ---
async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Menampilkan keyboard menu sesuai role."""
    user_id = update.effective_user.id
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
    existing_user = cursor.fetchone()
    conn.close()

    if existing_user:
        if is_admin(user_id):
            await update.message.reply_text(
                'Pilih opsi layanan (Admin Panel) ⚙️:',
                reply_markup=get_admin_main_menu_keyboard()
            )
        else:
            await update.message.reply_text(
                'Pilih opsi layanan ✨:',
                reply_markup=get_main_menu_keyboard()
            )
    else:
        await update.message.reply_text('Maaf, Anda belum terdaftar. Silakan gunakan perintah /start terlebih dahulu.')

# --- FUNGSI HELPER UNTUK HANDLER TOMBOL YANG MENJALANKAN SKRIP UMUM ---
async def handle_general_script_button(update: Update, context: ContextTypes.DEFAULT_TYPE, script_path: str, message_loading: str, message_error: str, return_markup: ReplyKeyboardMarkup = None) -> None:
    """
    Fungsi helper untuk menangani penekanan tombol yang akan mengeksekusi skrip SSH.
    Digunakan untuk skrip yang tidak memerlukan input interaktif.
    """
    user_id = update.effective_user.id
    if return_markup is None:
        return_markup = get_admin_main_menu_keyboard() if is_admin(user_id) else get_main_menu_keyboard()

    await update.message.reply_text(f"⏳ {message_loading}")
    result = await run_ssh_command(f"bash {script_path}")
    if "Error:" in result or "Terjadi Kesalahan di Server!" in result: 
        await update.message.reply_text(f"{message_error}\n{result}", parse_mode='HTML', reply_markup=return_markup)
    else:
        await update.message.reply_text(result, parse_mode='HTML', reply_markup=return_markup)

# --- HANDLER UNTUK MENU UTAMA (Navigasi ke Sub-Menu) ---
async def menu_ssh_ovpn_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Menampilkan sub-menu SSH OVPN."""
    await update.message.reply_text(
        "➡️ Anda di Menu <b>SSH OVPN</b>. Pilih opsi:",
        reply_markup=get_ssh_ovpn_menu_keyboard(), parse_mode='HTML'
    )

async def menu_vmess_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Menampilkan sub-menu VMESS (untuk pembuatan/trial)."""
    await update.message.reply_text(
        "➡️ Anda di Menu <b>VMESS</b>. Pilih opsi:",
        reply_markup=get_vmess_creation_menu_keyboard(), parse_mode='HTML'
    )

async def menu_trojan_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Menampilkan sub-menu Trojan."""
    await update.message.reply_text(
        "➡️ Anda di Menu <b>TROJAN</b>. Pilih opsi:",
        reply_markup=get_trojan_menu_keyboard(), parse_mode='HTML'
    )

async def menu_shdwsk_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Menampilkan sub-menu Shadowsocks."""
    await update.message.reply_text(
        "➡️ Anda di Menu <b>Shadowsocks</b>. Pilih opsi:",
        reply_markup=get_shadowsocks_menu_keyboard(), parse_mode='HTML'
    )

# --- Handler untuk tombol 'Back to Main Menu' ---
async def back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Mengembalikan ke menu utama sesuai role."""
    user_id = update.effective_user.id
    if is_admin(user_id):
        await update.message.reply_text(
            "↩️ Kembali ke <b>Menu Utama (Admin Panel)</b>:",
            reply_markup=get_admin_main_menu_keyboard(), parse_mode='HTML'
        )
    else:
        await update.message.reply_text(
            "↩️ Kembali ke <b>Menu Utama</b>:",
            reply_markup=get_main_menu_keyboard(), parse_mode='HTML'
        )

# --- HANDLER UNTUK TOMBOL MENU UMUM (tidak memerlukan input interaktif) ---
async def menu_vless_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await handle_general_script_button(update, context, '/usr/bin/bot-cek-vless',
                               message_loading='Memuat menu VLESS...',
                               message_error='❌ Gagal memuat menu VLESS.')

async def menu_shdwsk_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await handle_general_script_button(update, context, '/usr/bin/bot-trialss',
                               message_loading='Memuat menu SHADOWSOCKS...',
                               message_error='❌ Gagal memuat menu SHADOWSOCKS.')

# --- HANDLER KHUSUS ADMIN (diaktifkan di menu admin) ---
async def check_service_admin_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("🚫 Maaf, fitur ini hanya untuk admin.", reply_markup=get_main_menu_keyboard())
        return
    await handle_general_script_button(update, context, '/usr/bin/resservice',
                               message_loading='Memeriksa status layanan...',
                               message_error='❌ Gagal memeriksa status layanan.',
                               return_markup=get_admin_main_menu_keyboard())

async def other_setting_admin_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("🚫 Maaf, fitur ini hanya untuk admin.", reply_markup=get_main_menu_keyboard())
        return
    await handle_general_script_button(update, context, '/usr/bin/bot-vps-info',
                               message_loading='Memuat informasi VPS...',
                               message_error='❌ Gagal memuat informasi VPS.',
                               return_markup=get_admin_main_menu_keyboard())

# --- HANDLER UNTUK NAVIGASI KE SUB-MENU MANAGE USERS ---
async def manage_users_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("🚫 Maaf, fitur ini hanya untuk admin.", reply_markup=get_main_menu_keyboard())
        return
    await update.message.reply_text(
        "➡️ Anda di Menu <b>Manajemen Pengguna</b>. Pilih opsi:",
        reply_markup=get_manage_users_menu_keyboard(), parse_mode='HTML'
    )

# --- HANDLER UNTUK TOMBOL "CREATE TRIAL TROJAN" ---
async def create_trial_trojan_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await handle_general_script_button(update, context, '/usr/bin/bot-trial',
                               message_loading='Membuat akun trial Trojan...',
                               message_error='❌ Gagal membuat akun trial Trojan.',
                               return_markup=get_trojan_menu_keyboard())

# --- HANDLER UNTUK TOMBOL "CREATE TRIAL VMESS" ---
async def create_trial_vmess_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await handle_general_script_button(update, context, '/usr/bin/bot-trialws',
                               message_loading='Membuat akun trial VMESS...',
                               message_error='❌ Gagal membuat akun VMESS.',
                               return_markup=get_vmess_creation_menu_keyboard())

# --- HANDLER KHUSUS untuk 'CHECK VMESS SERVICE' di sub-menu VMESS ---
async def check_vmess_service_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await handle_general_script_button(update, context, '/usr/bin/bot-cek-vmess',
                               message_loading='Memeriksa status VMESS...',
                               message_error='❌ Gagal memeriksa status VMESS.',
                               return_markup=get_vmess_creation_menu_keyboard())

# --- HANDLER TOMBOL TANPA EKSEKUSI SKRIP (Untuk tombol yang hanya membalas teks) ---
async def info_ssh_ovpn_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler untuk tombol INFO SSH OVPN di sub-menu SSH OVPN."""
    await update.message.reply_text('ℹ️ Informasi tentang layanan SSH OVPN akan ditampilkan di sini.', reply_markup=get_ssh_ovpn_menu_keyboard())

async def create_akun_trojan_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('⚙️ Fitur pembuatan akun Trojan penuh akan segera tersedia.', reply_markup=get_trojan_menu_keyboard())

# --- HANDLER UNTUK TOMBOL USER ---
async def view_transactions_user_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Menampilkan riwayat transaksi pengguna"""
    user_id = update.effective_user.id
    transactions = get_user_transactions(user_id)
    
    if not transactions:
        await update.message.reply_text("📜 Anda belum memiliki riwayat transaksi.", reply_markup=get_main_menu_keyboard())
        return
    
    message = "📜 <b>Riwayat Transaksi Terakhir Anda</b>\n\n"
    for tx in transactions:
        message += (
            f"📝 Tipe: {tx['type']}\n"
            f"💰 Jumlah: Rp {tx['amount']:,.0f}\n"
            f"⏱️ Waktu: {tx['timestamp']}\n"
            f"📋 Deskripsi: {tx.get('description', '-')}\n"
            f"──────────────────\n"
        )
    
    await update.message.reply_text(message, parse_mode='HTML', reply_markup=get_main_menu_keyboard())

async def check_balance_user_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Menampilkan saldo pengguna"""
    user_id = update.effective_user.id
    balance = get_user_balance(user_id)
    await update.message.reply_text(
        f"💰 <b>Saldo Anda saat ini:</b> Rp {balance:,.0f}",
        parse_mode='HTML',
        reply_markup=get_main_menu_keyboard()
    )

async def topup_saldo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Menangani permintaan topup saldo"""
    try:
        # Coba kirim gambar QRIS dari file lokal
        with open(QRIS_IMAGE_PATH, 'rb') as photo:
            await update.message.reply_photo(
                photo=InputFile(photo),
                caption=(
                    "💳 <b>TOPUP SALDO via QRIS</b>\n\n"
                    "1. Scan QRIS di atas untuk pembayaran\n"
                    "2. Setelah transfer, kirim bukti pembayaran ke admin @" + TELEGRAM_ADMIN_USERNAME + "\n"
                    "3. Saldo akan ditambahkan setelah pembayaran dikonfirmasi\n\n"
                    f"💬 WhatsApp Admin: {WHATSAPP_ADMIN_NUMBER}\n"
                    f"👥 Grup Telegram: {GROUP_TELEGRAM_LINK}"
                ),
                parse_mode='HTML',
                reply_markup=get_main_menu_keyboard()
            )
    except FileNotFoundError:
        # Jika gambar lokal tidak ditemukan, gunakan URL fallback
        await update.message.reply_text(
            "💳 <b>TOPUP SALDO via QRIS</b>\n\n"
            "1. Kunjungi link berikut untuk pembayaran: " + QRIS_IMAGE_URL_FALLBACK + "\n"
            "2. Setelah transfer, kirim bukti pembayaran ke admin @" + TELEGRAM_ADMIN_USERNAME + "\n"
            "3. Saldo akan ditambahkan setelah pembayaran dikonfirmasi\n\n"
            f"💬 WhatsApp Admin: {WHATSAPP_ADMIN_NUMBER}\n"
            f"👥 Grup Telegram: {GROUP_TELEGRAM_LINK}",
            parse_mode='HTML',
            reply_markup=get_main_menu_keyboard()
        )

async def refresh_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Menangani permintaan refresh menu"""
    user_id = update.effective_user.id
    if is_admin(user_id):
        await update.message.reply_text(
            "🔄 Menu diperbarui (Admin Mode)",
            reply_markup=get_admin_main_menu_keyboard()
        )
    else:
        await update.message.reply_text(
            "🔄 Menu diperbarui",
            reply_markup=get_main_menu_keyboard()
        )

# --- HANDLER KHUSUS ADMIN ---
async def view_all_transactions_admin_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Menampilkan semua transaksi (untuk admin)"""
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("🚫 Maaf, fitur ini hanya untuk admin.", reply_markup=get_main_menu_keyboard())
        return
    
    transactions = get_all_transactions(limit=20)
    if not transactions:
        await update.message.reply_text("📜 Tidak ada riwayat transaksi.", reply_markup=get_admin_main_menu_keyboard())
        return
    
    message = "📜 <b>Riwayat Transaksi Terakhir (Semua Pengguna)</b>\n\n"
    for tx in transactions:
        message += (
            f"👤 User ID: <code>{tx['user_id']}</code>\n"
            f"📝 Tipe: {tx['type']}\n"
            f"💰 Jumlah: Rp {tx['amount']:,.0f}\n"
            f"⏱️ Waktu: {tx['timestamp']}\n"
            f"📋 Deskripsi: {tx.get('description', '-')}\n"
            f"──────────────────\n"
        )
    
    await update.message.reply_text(message, parse_mode='HTML', reply_markup=get_admin_main_menu_keyboard())

# --- CONVERSATION HANDLERS ---
async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Membatalkan percakapan yang sedang berlangsung."""
    await update.message.reply_text(
        '❌ Operasi dibatalkan.',
        reply_markup=get_admin_main_menu_keyboard() if is_admin(update.effective_user.id) else get_main_menu_keyboard()
    )
    return ConversationHandler.END

# VMess Conversation Handlers
async def create_akun_vmess_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Memulai percakapan untuk pembuatan akun VMESS."""
    user_id = update.effective_user.id
    current_balance = get_user_balance(user_id)

    if current_balance < ACCOUNT_COST_IDR:
        await update.message.reply_text(
            f"🚫 <b>Saldo Anda tidak mencukupi!</b>\n"
            f"Saldo Anda saat ini: <b>Rp {current_balance:,.0f}</b>.\n"
            f"Untuk membuat akun VMESS (durasi {ACCOUNT_DURATION_DAYS} hari) dibutuhkan: <b>Rp {ACCOUNT_COST_IDR:,.0f}</b>.\n"
            "Silakan lakukan <b>TOPUP SALDO [QRIS]</b> terlebih dahulu.",
            parse_mode='HTML',
            reply_markup=get_vmess_creation_menu_keyboard()
        )
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            f"✅ Saldo Anda saat ini <b>Rp {current_balance:,.0f}</b>. Biaya pembuatan akun <b>Rp {ACCOUNT_COST_IDR:,.0f}</b>.\n"
            "Saldo Anda cukup. Silakan masukkan Username VMESS:"
        )
        return VMESS_GET_USERNAME

async def vmess_get_username(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    username = update.message.text
    if not username:
        await update.message.reply_text("Username tidak boleh kosong. Silakan masukkan Username VMESS:")
        return VMESS_GET_USERNAME
    
    if not username.isalnum() and "_" not in username:
        await update.message.reply_text("Username hanya boleh mengandung huruf, angka, dan underscore (_). Silakan masukkan Username yang valid:")
        return VMESS_GET_USERNAME

    context.user_data['vmess_username'] = username
    await update.message.reply_text("Username diterima. Sekarang, masukkan Masa Aktif (dalam hari, contoh: 30 untuk 30 hari):")
    return VMESS_GET_EXPIRED_DAYS

async def vmess_get_expired_days(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    expired_days_str = update.message.text
    if not expired_days_str.isdigit():
        await update.message.reply_text("Masa aktif harus berupa angka. Silakan masukkan Masa Aktif (contoh: 30):")
        return VMESS_GET_EXPIRED_DAYS
    
    expired_days = int(expired_days_str)
    context.user_data['vmess_expired_days'] = expired_days
    await update.message.reply_text("Masa Aktif diterima. Sekarang, masukkan Limit Kuota (dalam GB, contoh: 10 untuk 10 GB):")
    return VMESS_GET_QUOTA

async def vmess_get_quota(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    quota_str = update.message.text
    if not quota_str.isdigit():
        await update.message.reply_text("Limit Kuota harus berupa angka. Silakan masukkan Limit Kuota (contoh: 10):")
        return VMESS_GET_QUOTA
    
    quota = int(quota_str)
    context.user_data['vmess_quota'] = quota
    await update.message.reply_text("Limit Kuota diterima. Sekarang, masukkan Limit IP (contoh: 1 untuk 1 IP):")
    return VMESS_GET_IP_LIMIT

async def vmess_get_ip_limit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    ip_limit_str = update.message.text
    if not ip_limit_str.isdigit():
        await update.message.reply_text("Limit IP harus berupa angka. Silakan masukkan Limit IP (contoh: 1):")
        return VMESS_GET_IP_LIMIT
    
    ip_limit = int(ip_limit_str)
    context.user_data['vmess_ip_limit'] = ip_limit
    
    # Lanjut proses pembuatan akun VMESS
    user_id = update.effective_user.id
    username = context.user_data['vmess_username']
    expired_days = context.user_data['vmess_expired_days']
    quota = context.user_data['vmess_quota']
    ip_limit = context.user_data['vmess_ip_limit']

    current_balance = get_user_balance(user_id)
    if current_balance < ACCOUNT_COST_IDR:
        await update.message.reply_text(
            f"🚫 <b>Saldo Anda saat ini Rp {current_balance:,.0f}.</b> Biaya pembuatan akun <b>Rp {ACCOUNT_COST_IDR:,.0f}</b>.\n"
            "Maaf, saldo Anda tidak mencukupi saat proses akhir. Mungkin ada transaksi lain.\n"
            "Silakan lakukan <b>TOPUP SALDO [QRIS]</b> terlebih dahulu.",
            parse_mode='HTML',
            reply_markup=get_vmess_creation_menu_keyboard()
        )
        context.user_data.clear()
        return ConversationHandler.END

    deduction_successful = update_user_balance(user_id, ACCOUNT_COST_IDR, 'account_creation', f"VMESS account creation for {username}", is_deduction=True)

    if not deduction_successful:
        await update.message.reply_text(
            "⚠️ <b>Terjadi kesalahan saat mengurangi saldo Anda.</b> Mohon coba lagi atau hubungi administrator.",
            parse_mode='HTML',
            reply_markup=get_vmess_creation_menu_keyboard()
        )
        context.user_data.clear()
        return ConversationHandler.END

    await update.message.reply_text(
        f"✅ Saldo Anda <b>Rp {ACCOUNT_COST_IDR:,.0f}</b> telah dikurangi. Sisa saldo Anda: <b>Rp {get_user_balance(user_id):,.0f}</b>.\n"
        f"Membuat akun VMESS dengan detail:\n"
        f"Username: `{username}`\n"
        f"Masa Aktif: `{expired_days}` hari\n"
        f"Limit Kuota: `{quota}` GB\n"
        f"Limit IP: `{ip_limit}`\n"
        f"Mohon tunggu..."
    )

    command = f"bash /usr/bin/addws-bot {username} {expired_days} {quota} {ip_limit}"
    result_ssh = await run_ssh_command(command) 

    if "Error:" in result_ssh or "Terjadi Kesalahan di Server!" in result_ssh:
        update_user_balance(user_id, ACCOUNT_COST_IDR, 'refund', f"Refund for failed VMESS creation {username}", is_deduction=False) 
        await update.message.reply_text(
            f"❌ Gagal membuat akun VMESS:\n\n{result_ssh}\n"
            f"<b>Saldo Anda telah dikembalikan.</b>",
            parse_mode='HTML', reply_markup=get_vmess_creation_menu_keyboard()
        )
    else:
        await update.message.reply_text(f"🎉 Akun VMESS berhasil dibuat!\n\n{result_ssh}", parse_mode='HTML', reply_markup=get_vmess_creation_menu_keyboard())

    context.user_data.clear()
    return ConversationHandler.END

# Shadowsocks Conversation Handlers
async def create_akun_shdwsk_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Memulai percakapan untuk pembuatan akun Shadowsocks."""
    user_id = update.effective_user.id
    current_balance = get_user_balance(user_id)

    if current_balance < ACCOUNT_COST_IDR: # Asumsi SS juga 10rb
        await update.message.reply_text(
            f"🚫 <b>Saldo Anda tidak mencukupi!</b>\n"
            f"Saldo Anda saat ini: <b>Rp {current_balance:,.0f}</b>.\n"
            f"Untuk membuat akun Shadowsocks (durasi {ACCOUNT_DURATION_DAYS} hari) dibutuhkan: <b>Rp {ACCOUNT_COST_IDR:,.0f}</b>.\n"
            "Silakan lakukan <b>TOPUP SALDO [QRIS]</b> terlebih dahulu.",
            parse_mode='HTML',
            reply_markup=get_shadowsocks_menu_keyboard()
        )
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            f"✅ Saldo Anda saat ini <b>Rp {current_balance:,.0f}</b>. Biaya pembuatan akun <b>Rp {ACCOUNT_COST_IDR:,.0f}</b>.\n"
            "Saldo Anda cukup. Silakan masukkan Username Shadowsocks:"
        )
        return SHADOWSOCKS_GET_USERNAME

async def shdwsk_get_username(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    username = update.message.text
    if not username:
        await update.message.reply_text("Username tidak boleh kosong. Silakan masukkan Username Shadowsocks:")
        return SHADOWSOCKS_GET_USERNAME
    
    if not username.isalnum() and "_" not in username:
        await update.message.reply_text("Username hanya boleh mengandung huruf, angka, dan underscore (_). Silakan masukkan Username yang valid:")
        return SHADOWSOCKS_GET_USERNAME

    context.user_data['shdwsk_username'] = username
    await update.message.reply_text("Username diterima. Sekarang, masukkan Masa Aktif (dalam hari, contoh: 30 untuk 30 hari):")
    return SHADOWSOCKS_GET_EXPIRED_DAYS

async def shdwsk_get_expired_days(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    expired_days_str = update.message.text
    if not expired_days_str.isdigit():
        await update.message.reply_text("Masa aktif harus berupa angka. Silakan masukkan Masa Aktif (contoh: 30):")
        return SHADOWSOCKS_GET_EXPIRED_DAYS
    
    expired_days = int(expired_days_str)
    context.user_data['shdwsk_expired_days'] = expired_days
    await update.message.reply_text("Masa Aktif diterima. Sekarang, masukkan Limit Kuota (dalam GB, contoh: 10 untuk 10 GB):")
    return SHADOWSOCKS_GET_QUOTA

async def shdwsk_get_quota(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    quota_str = update.message.text
    if not quota_str.isdigit():
        await update.message.reply_text("Limit Kuota harus berupa angka. Silakan masukkan Limit Kuota (contoh: 10):")
        return ConversationHandler.END # Perbaiki: jika bukan angka, end convo
    
    quota = int(quota_str)
    context.user_data['shdwsk_quota'] = quota
    
    # Lanjut proses pembuatan akun Shadowsocks
    user_id = update.effective_user.id
    username = context.user_data['shdwsk_username']
    expired_days = context.user_data['shdwsk_expired_days']
    quota = context.user_data['shdwsk_quota']

    current_balance = get_user_balance(user_id)
    if current_balance < ACCOUNT_COST_IDR:
        await update.message.reply_text(
            f"🚫 <b>Saldo Anda saat ini Rp {current_balance:,.0f}.</b> Biaya pembuatan akun <b>Rp {ACCOUNT_COST_IDR:,.0f}</b>.\n"
            "Maaf, saldo Anda tidak mencukupi saat proses akhir. Mungkin ada transaksi lain.\n"
            "Silakan lakukan <b>TOPUP SALDO [QRIS]</b> terlebih dahulu.",
            parse_mode='HTML',
            reply_markup=get_shadowsocks_menu_keyboard()
        )
        context.user_data.clear()
        return ConversationHandler.END

    deduction_successful = update_user_balance(user_id, ACCOUNT_COST_IDR, 'account_creation', f"Shadowsocks account creation for {username}", is_deduction=True)

    if not deduction_successful:
        await update.message.reply_text(
            "⚠️ <b>Terjadi kesalahan saat mengurangi saldo Anda.</b> Mohon coba lagi atau hubungi administrator.",
            parse_mode='HTML',
            reply_markup=get_shadowsocks_menu_keyboard()
        )
        context.user_data.clear()
        return ConversationHandler.END

    await update.message.reply_text(
        f"✅ Saldo Anda <b>Rp {ACCOUNT_COST_IDR:,.0f}</b> telah dikurangi. Sisa saldo Anda: <b>Rp {get_user_balance(user_id):,.0f}</b>.\n"
        f"Membuat akun Shadowsocks dengan detail:\n"
        f"Username: `{username}`\n"
        f"Masa Aktif: `{expired_days}` hari\n"
        f"Limit Kuota: `{quota}` GB\n"
        f"Mohon tunggu..."
    )

    command = f"bash /usr/bin/addss-bot {username} {expired_days} {quota}" # addss-bot hanya 3 argumen
    result_ssh = await run_ssh_command(command) 

    if "Error:" in result_ssh or "Terjadi Kesalahan di Server!" in result_ssh:
        update_user_balance(user_id, ACCOUNT_COST_IDR, 'refund', f"Refund for failed Shadowsocks creation {username}", is_deduction=False) 
        await update.message.reply_text(
            f"❌ Gagal membuat akun Shadowsocks:\n\n{result_ssh}\n"
            f"<b>Saldo Anda telah dikembalikan.</b>",
            parse_mode='HTML', reply_markup=get_shadowsocks_menu_keyboard()
        )
    else:
        await update.message.reply_text(f"🎉 Akun Shadowsocks berhasil dibuat!\n\n{result_ssh}", parse_mode='HTML', reply_markup=get_shadowsocks_menu_keyboard())

    context.user_data.clear()
    return ConversationHandler.END

# Admin: Add Balance Conversation Handlers
async def add_balance_conversation_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Memulai percakapan untuk menambah saldo pengguna (admin only)."""
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("🚫 Maaf, fitur ini hanya untuk admin.", reply_markup=get_main_menu_keyboard())
        return ConversationHandler.END
    
    await update.message.reply_text(
        "➕ <b>Tambahkan Saldo Pengguna</b>\n\n"
        "Silakan masukkan <b>User ID</b> penerima:",
        parse_mode='HTML',
        reply_markup=get_manage_users_menu_keyboard()
    )
    return ADD_BALANCE_GET_USER_ID

async def add_balance_get_user_id_step(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Mendapatkan User ID untuk menambah saldo."""
    user_id_str = update.message.text
    if not user_id_str.isdigit():
        await update.message.reply_text("User ID harus berupa angka. Silakan masukkan User ID yang valid:")
        return ADD_BALANCE_GET_USER_ID
    
    user_id = int(user_id_str)
    context.user_data['add_balance_user_id'] = user_id
    
    await update.message.reply_text(
        f"User ID <code>{user_id}</code> diterima.\n"
        "Sekarang masukkan jumlah saldo yang akan ditambahkan (contoh: 50000):",
        parse_mode='HTML'
    )
    return ADD_BALANCE_GET_AMOUNT

async def add_balance_get_amount_step(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Mendapatkan jumlah saldo yang akan ditambahkan."""
    amount_str = update.message.text
    if not amount_str.replace('.', '').isdigit():  # Memungkinkan desimal
        await update.message.reply_text("Jumlah saldo harus berupa angka. Silakan masukkan jumlah yang valid:")
        return ADD_BALANCE_GET_AMOUNT
    
    amount = float(amount_str)
    user_id = context.user_data['add_balance_user_id']
    
    # Update saldo pengguna
    success = update_user_balance(user_id, amount, 'admin_topup', f"Saldo ditambahkan oleh admin {update.effective_user.id}")
    
    if success:
        await update.message.reply_text(
            f"✅ Berhasil menambahkan <b>Rp {amount:,.0f}</b> ke akun <code>{user_id}</code>.\n"
            f"Saldo baru: <b>Rp {get_user_balance(user_id):,.0f}</b>",
            parse_mode='HTML',
            reply_markup=get_manage_users_menu_keyboard()
        )
    else:
        await update.message.reply_text(
            "❌ Gagal menambahkan saldo. Pastikan User ID valid.",
            reply_markup=get_manage_users_menu_keyboard()
        )
    
    context.user_data.clear()
    return ConversationHandler.END

# Admin: Check User Balance Conversation Handlers
async def check_user_balance_conversation_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Memulai percakapan untuk mengecek saldo pengguna (admin only)."""
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("🚫 Maaf, fitur ini hanya untuk admin.", reply_markup=get_main_menu_keyboard())
        return ConversationHandler.END
    
    await update.message.reply_text(
        "🔎 <b>Cek Saldo Pengguna</b>\n\n"
        "Silakan masukkan <b>User ID</b> yang ingin dicek:",
        parse_mode='HTML',
        reply_markup=get_manage_users_menu_keyboard()
    )
    return CHECK_BALANCE_GET_USER_ID

async def check_user_balance_get_user_id_step(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Mendapatkan User ID untuk mengecek saldo."""
    user_id_str = update.message.text
    if not user_id_str.isdigit():
        await update.message.reply_text("User ID harus berupa angka. Silakan masukkan User ID yang valid:")
        return CHECK_BALANCE_GET_USER_ID
    
    user_id = int(user_id_str)
    balance = get_user_balance(user_id)
    
    await update.message.reply_text(
        f"💰 Saldo pengguna <code>{user_id}</code>: <b>Rp {balance:,.0f}</b>",
        parse_mode='HTML',
        reply_markup=get_manage_users_menu_keyboard()
    )
    return ConversationHandler.END

# Admin: View User Transactions Conversation Handlers
async def view_user_tx_conversation_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Memulai percakapan untuk melihat riwayat transaksi pengguna (admin only)."""
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("🚫 Maaf, fitur ini hanya untuk admin.", reply_markup=get_main_menu_keyboard())
        return ConversationHandler.END
    
    await update.message.reply_text(
        "📜 <b>Riwayat Transaksi Pengguna</b>\n\n"
        "Silakan masukkan <b>User ID</b> yang ingin dicek:",
        parse_mode='HTML',
        reply_markup=get_manage_users_menu_keyboard()
    )
    return VIEW_USER_TX_GET_USER_ID

async def view_user_tx_get_user_id_step(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Mendapatkan User ID untuk melihat riwayat transaksi."""
    user_id_str = update.message.text
    if not user_id_str.isdigit():
        await update.message.reply_text("User ID harus berupa angka. Silakan masukkan User ID yang valid:")
        return VIEW_USER_TX_GET_USER_ID
    
    user_id = int(user_id_str)
    transactions = get_user_transactions(user_id, limit=10)
    
    if not transactions:
        await update.message.reply_text(
            f"📜 Tidak ada riwayat transaksi untuk pengguna <code>{user_id}</code>.",
            parse_mode='HTML',
            reply_markup=get_manage_users_menu_keyboard()
        )
        return ConversationHandler.END
    
    message = f"📜 <b>Riwayat Transaksi Terakhir untuk User ID {user_id}</b>\n\n"
    for tx in transactions:
        message += (
            f"📝 Tipe: {tx['type']}\n"
            f"💰 Jumlah: Rp {tx['amount']:,.0f}\n"
            f"⏱️ Waktu: {tx['timestamp']}\n"
            f"📋 Deskripsi: {tx.get('description', '-')}\n"
            f"──────────────────\n"
        )
    
    await update.message.reply_text(
        message,
        parse_mode='HTML',
        reply_markup=get_manage_users_menu_keyboard()
    )
    return ConversationHandler.END

# Admin: Command untuk menambah saldo (alternatif dari conversation)
async def admin_add_balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler perintah /add_balance untuk admin."""
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("🚫 Maaf, fitur ini hanya untuk admin.", reply_markup=get_main_menu_keyboard())
        return
    
    if not context.args or len(context.args) != 2:
        await update.message.reply_text(
            "ℹ️ Penggunaan: /add_balance <user_id> <amount>\n"
            "Contoh: /add_balance 12345678 50000",
            reply_markup=get_admin_main_menu_keyboard()
        )
        return
    
    target_user_id_str, amount_str = context.args
    if not target_user_id_str.isdigit() or not amount_str.replace('.', '').isdigit():
        await update.message.reply_text(
            "❌ Format tidak valid. User ID dan Amount harus berupa angka.",
            reply_markup=get_admin_main_menu_keyboard()
        )
        return
    
    target_user_id = int(target_user_id_str)
    amount = float(amount_str)
    
    success = update_user_balance(target_user_id, amount, 'admin_topup', f"Saldo ditambahkan oleh admin {user_id} via command")
    
    if success:
        await update.message.reply_text(
            f"✅ Berhasil menambahkan <b>Rp {amount:,.0f}</b> ke akun <code>{target_user_id}</code>.\n"
            f"Saldo baru: <b>Rp {get_user_balance(target_user_id):,.0f}</b>",
            parse_mode='HTML',
            reply_markup=get_admin_main_menu_keyboard()
        )
    else:
        await update.message.reply_text(
            "❌ Gagal menambahkan saldo. Pastikan User ID valid.",
            reply_markup=get_admin_main_menu_keyboard()
        )

# --- Handler untuk pesan yang tidak dikenali ---
async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Menangani pesan yang tidak dikenali."""
    user_id = update.effective_user.id
    if is_admin(user_id):
        await update.message.reply_text(
            "🤔 Perintah tidak dikenali. Silakan pilih menu di bawah:",
            reply_markup=get_admin_main_menu_keyboard()
        )
    else:
        await update.message.reply_text(
            "🤔 Perintah tidak dikenali. Silakan pilih menu di bawah:",
            reply_markup=get_main_menu_keyboard()
        )

# --- FUNGSI UTAMA UNTUK MEMULAI BOT ---
def main() -> None:
    """Fungsi utama untuk memulai bot."""
    logger.info("Bot is starting...")

    # Validasi awal untuk kredensial SSH
    if not SSH_USERNAME:
        logger.error("Variabel lingkungan SSH_USERNAME tidak disetel atau kosong.")
        exit(1)
    if not SSH_PASSWORD:
        logger.critical("Variabel lingkungan SSH_PASSWORD tidak disetel atau kosong. Bot tidak dapat memulai SSH.")
        exit(1)
    
    application = Application.builder().token(BOT_TOKEN).build()

    # --- Handler perintah dan navigasi menu utama ---
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("menu", show_menu))

    application.add_handler(MessageHandler(filters.Regex(r'^🚀 MENU SSH OVPN$'), menu_ssh_ovpn_main))
    application.add_handler(MessageHandler(filters.Regex(r'^⚡ MENU VMESS$'), menu_vmess_main)) 
    application.add_handler(MessageHandler(filters.Regex(r'^🛡️ MENU TROJAN$'), menu_trojan_main))
    application.add_handler(MessageHandler(filters.Regex(r'^👻 MENU SHDWSK$'), menu_shdwsk_main)) 

    application.add_handler(MessageHandler(filters.Regex(r'^🔙 Back to Main Menu$'), back_to_main_menu))
    application.add_handler(MessageHandler(filters.Regex(r'^🔙 Back to Admin Menu$'), back_to_main_menu)) 

    # --- Handlers untuk tombol di Sub-Menu Trojan ---
    application.add_handler(MessageHandler(filters.Regex(r'^🆓 CREATE TRIAL TROJAN$'), create_trial_trojan_handler))
    application.add_handler(MessageHandler(filters.Regex(r'^➕ CREATE AKUN TROJAN$'), create_akun_trojan_handler))

    # --- Handlers untuk tombol di Sub-Menu VMESS ---
    application.add_handler(MessageHandler(filters.Regex(r'^🆓 CREATE TRIAL VMESS$'), create_trial_vmess_handler))
    application.add_handler(MessageHandler(filters.Regex(r'^📊 CHECK VMESS SERVICE$'), check_vmess_service_handler)) 
    
    # --- Handler untuk tombol di Sub-Menu SSH OVPN ---
    application.add_handler(MessageHandler(filters.Regex(r'^ℹ️ INFO SSH OVPN$'), info_ssh_ovpn_handler))

    # --- Handler untuk tombol menu umum lainnya ---
    application.add_handler(MessageHandler(filters.Regex(r'^🌀 MENU VLESS$'), menu_vless_handler))
    application.add_handler(MessageHandler(filters.Regex(r'^👻 MENU SHDWSK$'), menu_shdwsk_handler))

    # --- Handler KHUSUS ADMIN (perlu dicek role user) ---
    application.add_handler(MessageHandler(filters.Regex(r'^🔍 CHECK SERVICE$'), check_service_admin_handler))
    application.add_handler(MessageHandler(filters.Regex(r'^⚙️ OTHER SETTING$'), other_setting_admin_handler))
    application.add_handler(MessageHandler(filters.Regex(r'^👥 MANAGE USERS$'), manage_users_main)) 
    application.add_handler(MessageHandler(filters.Regex(r'^📜 Riwayat Transaksi Admin$'), view_all_transactions_admin_handler))

    # --- Handler untuk User Biasa: Cek Saldo & Riwayat Transaksi ---
    application.add_handler(MessageHandler(filters.Regex(r'^💳 Cek Saldo$'), check_balance_user_handler))
    application.add_handler(MessageHandler(filters.Regex(r'^📜 Riwayat Transaksi$'), view_transactions_user_handler))

    application.add_handler(MessageHandler(filters.Regex(r'^💰 TOPUP SALDO \[QRIS\]$'), topup_saldo_handler)) 
    application.add_handler(MessageHandler(filters.Regex(r'^🔄 REFRESH$'), refresh_handler))

    # --- CONVERSATION HANDLERS (Didefinisikan setelah semua handler step-nya) ---
    # VMess Conversation Handler
    vmess_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(r'^➕ CREATE AKUN VMESS$'), create_akun_vmess_start)],
        states={
            VMESS_GET_USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, vmess_get_username)],
            VMESS_GET_EXPIRED_DAYS: [MessageHandler(filters.TEXT & ~filters.COMMAND, vmess_get_expired_days)],
            VMESS_GET_QUOTA: [MessageHandler(filters.TEXT & ~filters.COMMAND, vmess_get_quota)],
            VMESS_GET_IP_LIMIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, vmess_get_ip_limit)],
        },
        fallbacks=[CommandHandler("cancel", cancel_conversation), MessageHandler(filters.COMMAND, cancel_conversation)], 
        allow_reentry=True 
    )
    application.add_handler(vmess_conv_handler)

    # Shadowsocks Conversation Handler
    shadowsocks_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(r'^➕ CREATE AKUN SHDWSK$'), create_akun_shdwsk_handler)], 
        states={
            SHADOWSOCKS_GET_USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, shdwsk_get_username)],
            SHADOWSOCKS_GET_EXPIRED_DAYS: [MessageHandler(filters.TEXT & ~filters.COMMAND, shdwsk_get_expired_days)],
            SHADOWSOCKS_GET_QUOTA: [MessageHandler(filters.TEXT & ~filters.COMMAND, shdwsk_get_quota)],
        },
        fallbacks=[CommandHandler("cancel", cancel_conversation), MessageHandler(filters.COMMAND, cancel_conversation)],
        allow_reentry=True
    )
    application.add_handler(shadowsocks_conv_handler)

    # Add Balance Conversation Handler (Admin)
    add_balance_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(r'^➕ Tambah Saldo Pengguna$'), add_balance_conversation_start)],
        states={
            ADD_BALANCE_GET_USER_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_balance_get_user_id_step)],
            ADD_BALANCE_GET_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_balance_get_amount_step)],
        },
        fallbacks=[CommandHandler("cancel", cancel_conversation), MessageHandler(filters.COMMAND, cancel_conversation)],
        allow_reentry=True
    )
    application.add_handler(add_balance_conv_handler)

    # Check User Balance Conversation Handler (Admin)
    check_balance_user_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(r'^🔎 Cek Saldo Pengguna$'), check_user_balance_conversation_start)],
        states={
            CHECK_BALANCE_GET_USER_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, check_user_balance_get_user_id_step)],
        },
        fallbacks=[CommandHandler("cancel", cancel_conversation), MessageHandler(filters.COMMAND, cancel_conversation)],
        allow_reentry=True
    )
    application.add_handler(check_balance_user_conv_handler)

    # View User Transactions Conversation Handler (Admin)
    view_user_tx_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(r'^📜 Riwayat Transaksi Pengguna$'), view_user_tx_conversation_start)],
        states={
            VIEW_USER_TX_GET_USER_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, view_user_tx_get_user_id_step)],
        },
        fallbacks=[CommandHandler("cancel", cancel_conversation), MessageHandler(filters.COMMAND, cancel_conversation)],
        allow_reentry=True
    )
    application.add_handler(view_user_tx_conv_handler)

    # --- CommandHandler untuk Admin: Tambah Saldo (Opsional, tetap ada sebagai alternatif /add_balance) ---
    application.add_handler(CommandHandler("add_balance", admin_add_balance_command))

    # --- Fallback Handler (paling akhir) ---
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown))

    logger.info("Bot running in polling mode...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
